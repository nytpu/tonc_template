// VERSION: 1.0.2
/* This file contains functions similar to *BSD's err and warn family of
 * functions, but implemented portably.  Also includes the {get,set}progname
 * extensions to stdlib.h.
 * See <https://www.freebsd.org/cgi/man.cgi?query=err&sektion=3> for more
 * information on these functions.
 * It should be noted that the eval parameter was removed from the err family
 * of functions, and they all exit with EXIT_FAILURE for portablilty reasons.
 *
 *
 * Copyright (c) 2021 nytpu <alex [at] nytpu.com>
 * SPDX-License-Identifier: BSL-1.0
 * The orginal source for this file is available at <https://git.sr.ht/~nytpu/libmisc>.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#pragma once
#ifndef ERR_H
#define ERR_H

#include <stdarg.h>

// Return the program name.
const char *getprogname(void);

// Set the program name to be returned with getprogname().
// setprogname(argv[0]) should be called early in the main function, as
// getprogname() is used in error reporting often.  setprogname is not
// reentrant, it should be called very very early, prior to binding signal
// handlers.
void setprogname(const char *name);

// Set the file to write errors to.  It should be a pointer to an open FILE*,
// or a NULL pointer to reset to stderr.  The error file defaults to stderr if
// err_set_file() is never called in a program.  err_set_file is not reentrant.
void err_set_file(void *file);

// Specify a function that can perform cleanup prior to exiting.  Passing a
// NULL pointer will reset the function to do nothing.  The exit function is
// called after all error messages are printed, so it is safe to close the file
// here.  err_set_exit is not reentrant.
void err_set_exit(void (*exit_func)(void));

// Print the program name, a colon, then print fmt formatted with arguments and
// another colon (if fmt is not NULL), then an error message obtained from
// errno with strerror.  Then call the exit function (see err_set_exit above),
// and exit with code EXIT_FAILURE.
// verr* variants use a pre-existing va_list rather than using varargs.
// *errc variants use a provided code with strerror rather than using errno.
void err(const char *fmt, ...);
void errc(int code, const char *fmt, ...);
void verr(const char *fmt, va_list ap);
void verrc(int code, const char *fmt, va_list ap);

// Print the program name, a colon, then print fmt formatted with arguments and
// another colon (if fmt is not NULL), then an error message obtained from
// errno with strerror.
// vwarn* variants use a pre-existing va_list rather than using varargs.
// *warnc variants use a provided code with strerror rather than using errno.
void warn(const char *fmt, ...);
void warnc(int code, const char *fmt, ...);
void vwarn(const char *fmt, va_list ap);
void vwarnc(int code, const char *fmt, va_list ap);

// Print the program name, a colon, then print fmt formatted with arguments (if
// fmt is not NULL).  Then call the exit function (see err_set_exit above), and
// exit with code EXIT_FAILURE.
// verr* variants use a pre-existing va_list rather than using varargs.
void errx(const char *fmt, ...);
void verrx(const char *fmt, va_list ap);

// Print the program name, a colon, then print fmt formatted with arguments (if
// fmt is not NULL).
// vwarn* variants use a pre-existing va_list rather than using varargs.
void warnx(const char *fmt, ...);
void vwarnx(const char *fmt, va_list ap);

#endif // ERR_H
