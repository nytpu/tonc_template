// VERSION: 1.3.0
/* This file provides an implementation of an arena allocator that allows for
 * many allocations, which are then freed all at once.  It is particularly
 * useful for functions with lots of temporary allocations (string parsing and
 * modification?) as you don't have to keep track of every little allocation,
 * and can instead free all memory used afterwards.
 *
 * This implementation is very loosely based off of Zig's arena allocator:
 * https://github.com/ziglang/zig/blob/master/lib/std/heap/arena_allocator.zig
 *
 * Copyright (c) 2021 nytpu <alex [at] nytpu.com>
 * SPDX-License-Identifier: BSL-1.0
 * The orginal source for this file is available at <https://git.sr.ht/~nytpu/libmisc>.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#pragma once
#ifndef ARENA_H
#define ARENA_H

#include <stddef.h>

// The arena type
typedef struct arena_s arena;

// Initialize a new arena and return it.  Returns NULL on failure.
arena *arena_init(void);

// Completely free all data in a given arena
void arena_deinit(arena *a);

// Allocate data of size in an arena.  Returns NULL on allocation failure.
// Existing data will not be modified if allocation fails.
void *arena_alloc(arena *a, size_t size);

// Sensible default on most modern operating systems, probably don't need to
// change.  The page size will be autodetected on POSIX systems and Windows, so
// you also don't need to modify this for those systems either.
#define ARENA_DEFAULT_PAGE_SIZE 4096U

#endif // ARENA_H
